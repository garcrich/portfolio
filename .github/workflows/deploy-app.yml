name: Deploy React App to AWS S3

env:
  AWS_REGION: us-west-1
  SITE_SUFFIX: rg-professional-portfolio-site-v1

on:
  push:
    branches:
      - main
      - development

jobs:
  build:
    name: build the application
    runs-on: ubuntu-latest

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: set up node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: install dependencies
        run: npm ci

      - name: unit tests
        run: npm test

      - name: build
        run: npm run build

      - name: Upload Artifact
        uses: actions/upload-artifact@master
        with:
          name: build
          path: build

  deploy:
    permissions:
      id-token: write
      contents: read

    name: Upload to Amazon S3
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: build
          path: build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: arn:aws:iam::195789042358:role/GitHubActions
          role-duration-seconds: 900
          aws-region: us-west-1

      - name: Deploy the CloudFormation stack
        run: |
          if [ ${{ github.ref }} == 'refs/heads/development' ]; then
            STACK_NAME="dev-${{ env.SITE_SUFFIX }}"
            TEMPLATE_FILE="./cloudformation/dev-stack.yml"
          else
            STACK_NAME="prod-${{ env.SITE_SUFFIX }}"
            TEMPLATE_FILE="./cloudformation/prod-stack.yml"
          fi

          aws cloudformation deploy \
            --stack-name $STACK_NAME \
            --template-file $TEMPLATE_FILE \
            --parameter-overrides SiteSuffix=${{ env.SITE_SUFFIX }} \
            --no-fail-on-empty-changeset

      - name: Retrieve the S3 bucket name
        id: get_bucket_name
        run: |
          BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' --output text)
          echo "S3_BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
