@import 'variables';
@import 'mixins';


.section-spacing {
  margin-bottom: 4rem; // Adjust the value as needed to get the desired spacing
}
// Utility class generator for margin and padding
@mixin generate-spacing-classes($property, $directions, $property-name, $sizes) {
  @each $suffix, $size in $sizes {
    @each $direction, $full-direction in $directions {
      .#{$property}#{$direction}-#{$suffix} {
        #{$property-name}-#{$full-direction}: #{$size};
      }
    }
  }
}

$sizes: (
  '0': var(--sp-0),
  'xs': var(--sp-xs),
  'sm': var(--sp-sm),
  'md': var(--sp-md),
  'lg': var(--sp-lg),
  'xl': var(--sp-xl)
);

$directions: (
  't': 'top',
  'b': 'bottom',
  'l': 'left',
  'r': 'right'
);

// Generate margin utility classes
@include generate-spacing-classes('m', $directions, 'margin', $sizes);

// Generate padding utility classes
@include generate-spacing-classes('p', $directions, 'padding', $sizes);

// Grid container
.grid {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  column-gap: var(--gutter-md); // Define a column gutter size variable
  row-gap: var(  --gutter-md); // Define a row gutter size variable
}

// Grid alignment and justification mixin
@mixin generate-grid-alignment-classes($prefix, $property) {
  .#{$prefix}-start {
    #{$property}: start;
  }

  .#{$prefix}-end {
    #{$property}: end;
  }

  .#{$prefix}-ctr {
    #{$property}: center;
  }

  .#{$prefix}-base {
    #{$property}: baseline;
  }
  

  .#{$prefix}-stretch {
    #{$property}: stretch;
  }

}

@include generate-grid-alignment-classes('g-as', 'align-self');
@include generate-grid-alignment-classes('g-js', 'justify-self');
@include generate-grid-alignment-classes('g-ac', 'align-content');
@include generate-grid-alignment-classes('g-jc', 'justify-content');
@include generate-grid-alignment-classes('g-ai', 'align-items');
@include generate-grid-alignment-classes('g-ji', 'justify-items');


// Default grid column (without breakpoint)
@for $i from 1 through 12 {
  .col-#{$i} {
    grid-column: span $i;
  }
}


// Grid columns
@mixin generate-responsive-columns($breakpoint) {
  @for $i from 1 through 12 {
    .col-#{$i}-#{$breakpoint} {
      grid-column: span $i;
    }
  }
}

// Generate responsive column classes for each breakpoint
@include desktop {
  @include generate-responsive-columns('dt');
}

@include tablet {
  @include generate-responsive-columns('tb');
}

@include mobile {
  @include generate-responsive-columns('mb');
}

// Grid gutters
$gutters: (
  '0': 0,
  'xs': 8px,
  'sm': 16px,
  'md': 24px,
  'lg': 32px,
  'xl': 40px
);

//default gutters
@mixin generate-default-gutters($gutters, $gutter-prop-name, $gutter-property) {
  @each $suffix, $size in $gutters {
    .#{$gutter-prop-name}-g-#{$suffix} {
      #{$gutter-property}: #{$size};
    }
  }
}

// Generate default gutter classes
@include generate-default-gutters($gutters, 'col', 'column-gap');
@include generate-default-gutters($gutters, 'row', 'row-gap');

// breakpoint gutters
@mixin generate-responsive-gutters($gutters,$gutter-prop-name, $breakpoint, $gutter-property) {
  @each $suffix, $size in $gutters {
    .#{$gutter-prop-name}-#{$suffix}-g-#{$breakpoint} {
      #{$gutter-property}: #{$size};
    }
  }
}

// Generate responsive gutter classes for each breakpoint
@include desktop {
  @include generate-responsive-gutters($gutters, 'col', 'column-gap', 'dt');
  @include generate-responsive-gutters($gutters, 'col', 'row-gap', 'dt');
}

@include tablet {
  @include generate-responsive-gutters($gutters, 'col', 'column-gap', 'tb');
  @include generate-responsive-gutters($gutters, 'col', 'row-gap', 'tb');
}

@include mobile {
  @include generate-responsive-gutters($gutters, 'col', 'column-gap', 'mb');
  @include generate-responsive-gutters($gutters, 'col', 'row-gap', 'mb');
}

// Grid offset
@mixin generate-offset-classes($breakpoint) {
  @for $i from 1 through 11 {
    .g-os-#{$breakpoint}-#{$i} {
      grid-column-start: $i + 1;
    }
  }
}

// Default offset (without breakpoint)
@for $i from 1 through 11 {
  .g-os-#{$i} {
    grid-column-start: $i + 1;
  }
}

// Generate responsive offset classes for each breakpoint
@include desktop {
  @include generate-offset-classes('dt');
}

@include tablet {
  @include generate-offset-classes('tb');
}

@include mobile {
  @include generate-offset-classes('mb');
}


// Add a mixin to generate font classes
@mixin generate-font-classes($property, $values) {
  @each $suffix, $value in $values {
    .ft-#{$suffix} {
      #{$property}: #{$value};
    }
  }
}

// Define the font-weight and font color values
$font-weights: (
  'wt-norm': var(--font-weight-normal),
  'wt-semi-bold': var(--font-semi-bold),
  'wt-bold': var(--font-weight-bold),
);

$font-colors: (
  'clr-1': var(--text-color-primary),
  'clr-2': var(--text-color-secondary),
  'clr-3': var(--text-color-tertiary),
);

// Generate font-weight and font-color classes using the mixin
@include generate-font-classes('font-weight', $font-weights);
@include generate-font-classes('color', $font-colors);


// Text Sizes
$text-sizes: (
  'xs': 0.75rem, // 12px
  'sm': 0.875rem, // 14px
  'base': 1rem, // 16px
  'lg': 1.125rem, // 18px
  'xl': 1.25rem, // 20px
  '2xl': 1.5rem, // 24px
  '3xl': 2rem, // 32px
  '4xl': 2.5rem, // 40px
  '5xl': 3rem, // 48px
  '6xl': 3.5rem, // 56px
);

// Generate text size classes
@mixin generate-text-size-classes($property, $values) {
  @each $suffix, $value in $values {
    .text-#{$suffix} {
      #{$property}: #{$value};
    }
  }
}

@include generate-text-size-classes('font-size', $text-sizes);